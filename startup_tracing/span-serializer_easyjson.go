// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package startup_tracing

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing(in *jlexer.Lexer, out *jsonSpanSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(jsonSpanSlice, 0, 0)
			} else {
				*out = jsonSpanSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 jsonSpanModel
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing(out *jwriter.Writer, in jsonSpanSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v jsonSpanSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonSpanSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonSpanSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonSpanSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing(l, v)
}
func easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing1(in *jlexer.Lexer, out *jsonSpanModel) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "traceId":
			out.TraceID = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "parentId":
			out.ParentID = string(in.String())
		case "debug":
			out.Debug = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "kind":
			out.Kind = string(in.String())
		case "shared":
			out.Shared = bool(in.Bool())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "duration":
			out.Duration = int64(in.Int64())
		case "localEndpoint":
			(out.LocalEndpoint).UnmarshalEasyJSON(in)
		case "remoteEndpoint":
			(out.RemoteEndpoint).UnmarshalEasyJSON(in)
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]jsonAnnotation, 0, 2)
					} else {
						out.Annotations = []jsonAnnotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v4 jsonAnnotation
					(v4).UnmarshalEasyJSON(in)
					out.Annotations = append(out.Annotations, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.Tags)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing1(out *jwriter.Writer, in jsonSpanModel) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"traceId\":"
		out.RawString(prefix[1:])
		out.String(string(in.TraceID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if in.ParentID != "" {
		const prefix string = ",\"parentId\":"
		out.RawString(prefix)
		out.String(string(in.ParentID))
	}
	if in.Debug {
		const prefix string = ",\"debug\":"
		out.RawString(prefix)
		out.Bool(bool(in.Debug))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Kind != "" {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(in.Kind))
	}
	if in.Shared {
		const prefix string = ",\"shared\":"
		out.RawString(prefix)
		out.Bool(bool(in.Shared))
	}
	if in.Timestamp != 0 {
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	if in.Duration != 0 {
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int64(int64(in.Duration))
	}
	if true {
		const prefix string = ",\"localEndpoint\":"
		out.RawString(prefix)
		(in.LocalEndpoint).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"remoteEndpoint\":"
		out.RawString(prefix)
		(in.RemoteEndpoint).MarshalEasyJSON(out)
	}
	if len(in.Annotations) != 0 {
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v6, v7 := range in.Annotations {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Tags {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				out.String(string(v8Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jsonSpanModel) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonSpanModel) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonSpanModel) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonSpanModel) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing1(l, v)
}
func easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing2(in *jlexer.Lexer, out *jsonEndpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviceName":
			out.ServiceName = string(in.String())
		case "ipv4":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.IPv4).UnmarshalText(data))
			}
		case "ipv6":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.IPv6).UnmarshalText(data))
			}
		case "port":
			out.Port = uint16(in.Uint16())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing2(out *jwriter.Writer, in jsonEndpoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServiceName != "" {
		const prefix string = ",\"serviceName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.ServiceName))
	}
	if len(in.IPv4) != 0 {
		const prefix string = ",\"ipv4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.IPv4).MarshalText())
	}
	if len(in.IPv6) != 0 {
		const prefix string = ",\"ipv6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.RawText((in.IPv6).MarshalText())
	}
	if in.Port != 0 {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint16(uint16(in.Port))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jsonEndpoint) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonEndpoint) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonEndpoint) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonEndpoint) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing2(l, v)
}
func easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing3(in *jlexer.Lexer, out *jsonAnnotation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing3(out *jwriter.Writer, in jsonAnnotation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v jsonAnnotation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v jsonAnnotation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson857ccc77EncodeGithubComFlachnetzStartupV2StartupTracing3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *jsonAnnotation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *jsonAnnotation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson857ccc77DecodeGithubComFlachnetzStartupV2StartupTracing3(l, v)
}
